generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // 根据您的设置
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String // 存储哈希后的密码
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 新增用于登录追踪和账户锁定的字段
  failedLoginAttempts Int?      @default(0) // 登录失败尝试次数
  lastFailedLoginAt   DateTime? // 上次登录失败的时间
  isLocked            Boolean?  @default(false) // 账户是否被锁定
  lockoutExpiresAt    DateTime? // 账户锁定过期时间
  lastLoginAt         DateTime? // 用户最后成功登录的时间

  // 现有关系字段
  Todo            Todo[]
  Recipe          Recipe[]
  healthMetrics   UserHealthMetric[]
  aiChatSessions  AiChatSession[]
  exchangeQueries UserExchangeQuery[]
  wordProgress    UserWordProgress[]

  @@map("users")
}

model VocabularyWord {
  id          String   @id @default(cuid())
  english     String   @unique
  chinese     String   @db.Text
  phonetic_us String?
  phonetic_uk String?
  tags        Json?    @db.Json
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgress UserWordProgress[]

  @@index([english])
  @@index([source])
  @@map("vocabulary_words")
}

model UserWordProgress {
  id               String @id @default(cuid())
  userId           String
  vocabularyWordId String

  isMemorized    Boolean   @default(false)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?
  familiarity    Int? // 例如 0-5 的熟悉度等级

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabularyWord VocabularyWord @relation(fields: [vocabularyWordId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularyWordId])
  @@index([userId, isMemorized])
  @@index([userId, nextReviewAt])
  @@map("user_word_progress")
}

model Todo {
  id        String    @id @default(cuid())
  title     String    @default("无标题待办")
  content   String?   @db.Text
  completed Boolean   @default(false)
  important Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  image     String?   @db.MediumText // 如果存储 base64 图片，考虑其大小限制
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, completed, endDate]) // 常用查询组合
  @@index([userId, important, createdAt])
  @@map("todos") // 保持小写加下划线或根据你的习惯
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  ingredients  String   @db.Text // 可以考虑 Json 类型如果结构复杂
  instructions String   @db.Text
  category     String?
  prepTime     String? // 例如 "30 分钟"
  cookTime     String? // 例如 "1 小时"
  isFavorite   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
  @@index([userId, isFavorite])
  @@map("recipes")
}

model UserHealthMetric {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordedAt         DateTime @default(now()) // 记录的具体时间
  heightCm           Float? // 身高 (厘米)
  weightKg           Float? // 体重 (公斤)
  ageAtRecording     Int? // 记录时的年龄
  gender             String? // 例如 "male", "female", "other"
  activityLevel      String? // 例如 "sedentary", "light", "moderate", "active", "very_active"
  neckCm             Float? // 颈围 (厘米) - 用于某些体脂计算
  waistCm            Float? // 腰围 (厘米)
  hipCm              Float? // 臀围 (厘米)
  bmi                Float? // Body Mass Index
  bmr                Float? // Basal Metabolic Rate (基础代谢率)
  tdee               Float? // Total Daily Energy Expenditure (每日总能量消耗)
  bodyFatPercent     Float? // 体脂率 (%)
  recommendedWaterMl Float? // 每日推荐饮水量 (毫升)
  notes              String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId, recordedAt])
  @@map("user_health_metrics")
}

model AiChatSession {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?         @default("新的聊天")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  messages  AiChatMessage[]

  @@index([userId, updatedAt(sort: Desc)]) // 按更新时间降序索引
  @@map("ai_chat_sessions")
}

model AiChatMessage {
  id        String        @id @default(cuid())
  role      String // "user" 或 "assistant" (或 "system")
  content   String        @db.Text
  createdAt DateTime      @default(now())
  sessionId String
  session   AiChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("ai_chat_messages")
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   String // 基础货币代码, e.g., "USD"
  targetCurrency String // 目标货币代码, e.g., "CNY"
  rate           Float // 汇率：1 baseCurrency = rate targetCurrency
  name           String? // 可选的货币对名称, e.g., "美元/人民币"
  updatedAt      DateTime // 汇率数据的最后更新时间
  source         String? // 数据来源, e.g., "OpenExchangeRates"

  @@unique([baseCurrency, targetCurrency])
  @@index([baseCurrency])
  @@index([targetCurrency]) // 如果也经常按目标货币查询
  @@index([updatedAt])
  @@map("exchange_rates")
}

model UserExchangeQuery {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromCurrency String
  toCurrency   String
  amount       Float // 原始金额
  result       Float // 换算结果金额
  rate         Float // 当时使用的汇率
  queriedAt    DateTime @default(now())

  @@index([userId, queriedAt(sort: Desc)])
  @@map("user_exchange_queries")
}

model Ai2048Experience {
  id     String @id @default(cuid())
  gameId String @unique @default(cuid()) // 确保 gameId 唯一

  initialBoardStateJson String @db.Text // 存储 JSON 序列化的棋盘状态
  finalBoardStateJson   String @db.Text
  moveSequenceJson      String @db.Text // 存储 JSON 序列化的移动序列
  scoreAchieved         Int
  highestTile           Int
  numberOfMoves         Int

  createdAt DateTime @default(now())
  notes     String?  @db.Text // 改为 Text 以支持更长备注

  @@index([scoreAchieved, highestTile, createdAt(sort: Desc)])
  @@map("ai_global_2048_experiences")
}
