generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // 对于 Neon 等，通常不需要，可以移除或注释
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // 应用程序运行时使用
  // directUrl = env("DIRECT_URL") // Prisma Migrate 命令使用
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  failedLoginAttempts Int?      @default(0)
  lastFailedLoginAt   DateTime?
  isLocked            Boolean?  @default(false)
  lockoutExpiresAt    DateTime?
  lastLoginAt         DateTime?

  Todo            Todo[]
  Recipe          Recipe[]
  healthMetrics   UserHealthMetric[]
  aiChatSessions  AiChatSession[]
  exchangeQueries UserExchangeQuery[]
  wordProgress    UserWordProgress[]

  @@map("users")
}

model VocabularyWord {
  id          String   @id @default(cuid())
  english     String   @unique
  chinese     String   @db.Text
  phonetic_us String?
  phonetic_uk String?
  tags        Json? // Prisma maps this to jsonb in PostgreSQL
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgress UserWordProgress[]

  @@index([english])
  @@index([source])
  @@map("vocabulary_words")
}

model UserWordProgress {
  id               String @id @default(cuid())
  userId           String
  vocabularyWordId String

  isMemorized    Boolean   @default(false)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?
  familiarity    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabularyWord VocabularyWord @relation(fields: [vocabularyWordId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularyWordId])
  @@index([userId, isMemorized])
  @@index([userId, nextReviewAt])
  @@map("user_word_progress")
}

model Todo {
  id        String    @id @default(cuid())
  title     String    @default("无标题待办")
  content   String?   @db.Text
  completed Boolean   @default(false)
  important Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  image     String?   @db.Text // MODIFICATION: Changed from MediumText to Text for PostgreSQL compatibility
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, completed, endDate])
  @@index([userId, important, createdAt])
  @@map("todos")
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  ingredients  String   @db.Text // Consider Json if structured
  instructions String   @db.Text
  category     String?
  prepTime     String?
  cookTime     String?
  isFavorite   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
  @@index([userId, isFavorite])
  @@map("recipes")
}

model UserHealthMetric {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordedAt         DateTime @default(now())
  heightCm           Float?
  weightKg           Float?
  ageAtRecording     Int?
  gender             String?
  activityLevel      String?
  neckCm             Float?
  waistCm            Float?
  hipCm              Float?
  bmi                Float?
  bmr                Float?
  tdee               Float?
  bodyFatPercent     Float?
  recommendedWaterMl Float?
  notes              String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId, recordedAt])
  @@map("user_health_metrics")
}

model AiChatSession {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?         @default("新的聊天")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  messages  AiChatMessage[]

  @@index([userId, updatedAt(sort: Desc)])
  @@map("ai_chat_sessions")
}

model AiChatMessage {
  id        String        @id @default(cuid())
  role      String
  content   String        @db.Text
  createdAt DateTime      @default(now())
  sessionId String
  session   AiChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("ai_chat_messages")
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   String
  targetCurrency String
  rate           Float
  name           String?
  updatedAt      DateTime // Should this be @updatedAt or manually set?
  source         String?

  @@unique([baseCurrency, targetCurrency])
  @@index([baseCurrency])
  @@index([targetCurrency])
  @@index([updatedAt])
  @@map("exchange_rates")
}

model UserExchangeQuery {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromCurrency String
  toCurrency   String
  amount       Float
  result       Float
  rate         Float
  queriedAt    DateTime @default(now())

  @@index([userId, queriedAt(sort: Desc)])
  @@map("user_exchange_queries")
}

model Ai2048Experience {
  id     String @id @default(cuid())
  gameId String @unique @default(cuid())

  initialBoardStateJson String @db.Text
  finalBoardStateJson   String @db.Text
  moveSequenceJson      String @db.Text
  scoreAchieved         Int
  highestTile           Int
  numberOfMoves         Int

  createdAt DateTime @default(now())
  notes     String?  @db.Text

  @@index([scoreAchieved, highestTile, createdAt(sort: Desc)])
  @@map("ai_global_2048_experiences")
}
