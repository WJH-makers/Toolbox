generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  username        String              @unique
  password        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  Todo            Todo[]
  Recipe          Recipe[]
  healthMetrics   UserHealthMetric[]
  aiChatSessions  AiChatSession[]
  exchangeQueries UserExchangeQuery[]

  @@map("users")
}

model Todo {
  id        String    @id @default(cuid())
  content   String
  completed Boolean   @default(false)
  important Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, startDate])
  @@index([userId, endDate])
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  ingredients  String   @db.Text
  instructions String   @db.Text
  category     String?
  prepTime     String?
  cookTime     String?
  isFavorite   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isFavorite])
  @@map("recipes")
}

model UserHealthMetric {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordedAt         DateTime @default(now())
  heightCm           Float?
  weightKg           Float?
  ageAtRecording     Int?
  gender             String?
  activityLevel      String?
  neckCm             Float?
  waistCm            Float?
  hipCm              Float?
  bmi                Float?
  bmr                Float?
  tdee               Float?
  bodyFatPercent     Float?
  recommendedWaterMl Float?
  notes              String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId, recordedAt])
  @@map("user_health_metrics")
}

model AiChatSession {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  messages  AiChatMessage[]

  @@index([userId, updatedAt])
  @@map("ai_chat_sessions")
}

model AiChatMessage {
  id        String        @id @default(cuid())
  role      String
  content   String        @db.Text
  createdAt DateTime      @default(now())
  sessionId String
  session   AiChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade) // AiChatMessage 与 AiChatSession 的关系

  @@index([sessionId, createdAt])
  @@map("ai_chat_messages")
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   String
  targetCurrency String
  rate           Float
  name           String?
  updatedAt      DateTime
  source         String?

  @@unique([baseCurrency, targetCurrency])
  @@index([baseCurrency])
  @@index([updatedAt])
  @@map("exchange_rates")
}

model UserExchangeQuery {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromCurrency String
  toCurrency   String
  amount       Float
  result       Float
  rate         Float
  queriedAt    DateTime @default(now())

  @@index([userId, queriedAt])
  @@map("user_exchange_queries")
}
