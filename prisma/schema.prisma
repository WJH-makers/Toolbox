// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  username       String             @unique
  password       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  Todo           Todo[]
  Recipe         Recipe[]
  healthMetrics  UserHealthMetric[]
  aiChatMessages AiChatMessage[]
  aiChatSessions AiChatSession[] // 新增：用户可以有多个聊天会话

  @@map("users")
}

model Todo {
  id        String    @id @default(cuid())
  content   String
  completed Boolean   @default(false)
  important Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, startDate])
  @@index([userId, endDate])
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  ingredients  String  @db.Text
  instructions String  @db.Text
  category     String?
  prepTime     String?
  cookTime     String?
  isFavorite   Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isFavorite])
  @@map("recipes")
}

model UserHealthMetric {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordedAt         DateTime @default(now())
  heightCm           Float?
  weightKg           Float?
  ageAtRecording     Int?
  gender             String?
  activityLevel      String?
  neckCm             Float?
  waistCm            Float?
  hipCm              Float?
  bmi                Float?
  bmr                Float?
  tdee               Float?
  bodyFatPercent     Float?
  recommendedWaterMl Float?
  notes              String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId, recordedAt])
  @@map("user_health_metrics")
}

// AI 聊天会话模型
model AiChatSession {
  id        String          @id @default(cuid())
  userId    String // 所属用户ID
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String? // 会话标题 (例如第一条用户消息的摘要，或用户自定义)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt // 每当有新消息时更新此时间戳，方便排序
  messages  AiChatMessage[] // 此会话包含的消息

  @@index([userId, updatedAt]) // 按用户和更新时间索引，方便获取最近的会话
  @@map("ai_chat_sessions")
}

// AI聊天消息模型 (修改后)
model AiChatMessage {
  id String @id @default(cuid())
  // userId    String   // 不再直接关联 User，通过 AiChatSession 关联
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  role    String // 消息发送者角色: "user" 或 "assistant"
  content String @db.Text

  createdAt DateTime @default(now())

  sessionId String // 所属会话ID
  session   AiChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade) // 与会话关联
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?

  // 移除 @@index([userId, createdAt]) 因为userId被移除了
  @@index([sessionId, createdAt]) // 按会话ID和时间索引消息
  @@map("ai_chat_messages")
}
